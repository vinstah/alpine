datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]

  tenantUsers TenantUser[]
  tenantUserInvitation TenantUserInvitation[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id        String  @id @unique @default(cuid())
  email     String  @unique
  username  String  @unique
  name      String?
  firstname String?
  surname   String?
  phone     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password Password?
  notes    Note[]
  roles    Role[]
  session  Session[]

  defaultWorkspaceId String?
  tenants         TenantUser[]
  workspaces      WorkspaceUser[]
  invitation      TenantUserInvitation?
  createdMembers  Member[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Note {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String
}

model Tenant {
  id                     String                 @id @default(uuid())
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  name                   String
  users                  TenantUser[]
  workspaces             Workspace[]
  invitations            TenantUserInvitation[]
  members                Member[]
}

model TenantUser {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  joined   Int
  status   Int
}

model TenantUserInvitation {
  id            String                          @id @default(uuid())
  tenantId      String
  tenant        Tenant                          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email         String
  firstName     String
  lastName      String
  roleId String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  pending       Boolean
  workspaces    TenantUserInvitationWorkspace[]
  createdUserId String?                         @unique
  user          User?                           @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
}

model TenantUserInvitationWorkspace {
  id           String               @id @default(uuid())
  invitationId String
  invitation   TenantUserInvitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  workspaceId  String
}

model Workspace {
  id                   String          @id @default(uuid())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  tenantId             String
  tenant               Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name                 String
  type                 Int
  businessMainActivity String
  registrationNumber   String
  registrationDate     DateTime?
  users                WorkspaceUser[]
  members              Member[]
}

model WorkspaceUser {
  id          String    @id @default(uuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Member {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  createdByUserId  String
  createdByUser    User               @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspaceId      String
  workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  firstName        String
  lastName         String
  email            String
}
